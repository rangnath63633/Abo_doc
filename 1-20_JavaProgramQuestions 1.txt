1. Convert a string as given in the format below:

Example:
aabbb into a2b3
aaaa into a4
a into a1

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class firstOne {
    public static String findStringCount(String input){
        StringBuilder sb= new StringBuilder();
        HashMap<Character,Integer> hashMap = new LinkedHashMap<>();
        for(int i=0;i<input.length();i++){
            char in=input.charAt(i);
            if(hashMap.containsKey(in)){
               int count=hashMap.get(in);
               hashMap.put(in,++count);
            }
            else{
                hashMap.put(in,1);
            }

        }
        for(Map.Entry<Character,Integer> entry: hashMap.entrySet()){
            sb.append(entry.getKey()).append(entry.getValue());
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String a="aabbb";
        String b="aaaa";
        String c="a";
        System.out.println(findStringCount(a));
        System.out.println(findStringCount(b));
        System.out.println(findStringCount(c));
    }
}


2. Given a dictionary (list of words) and a substring, you have to return the length of the longest word in the dictinary containing the substring.

Example:
String[] dict = {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
String toSearch = "ODG";

//Returns 9 (LODGESSSS)


public class SecondOne {
    public static int findPrefixCount(String[] dict, String toSearch){
       int maxLength=0;
        for(String word: dict){
            if(word.contains(toSearch)){
                maxLength=Math.max(maxLength,word.length());
            }
        }
        return maxLength;
    }
    public static void main(String[] args) {
        String[] dict = {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
        String toSearch = "ODG";
        System.out.println(findPrefixCount(dict,toSearch));
    }
}


3. Prefix Search
    Given a document and a prefix, return all the words starting with the prefix.

Example:
Say the document is a string of words,
    String[] arr = {"apple", "applet", "bread", "aper"};
    String prefix = "app";

    // Return apple, applet

public class thridOne {
    public static String findStringSearch(String[] input,String prefix){
        StringBuilder sb= new StringBuilder();
        for(String word: input){
            if(word.contains(prefix)){
                sb.append(word).append(" ");
            }
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String[] arr = {"apple", "applet", "bread", "aper"};
        String prefix = "app";
        System.out.println(findStringSearch(arr,prefix));
    }
}


4. Given a sentence/phrase and two words,
    return the minimum distance between the words.

Example:
    String str = “the quick the brown quick brown the frog”
    String word1 = “quick”
    String word2 = "frog"

    //Return 2

import java.util.HashMap;

public class fourthOne {
    public static int minDistanceSentence(String str,String word1,String word2) {
        int minDistance = Integer.MAX_VALUE;
        int index1 = -1;
        int index2 = -1;
        String[] sentence = str.split(" ");
        for (int i = 0; i < sentence.length; i++) {
            if (sentence[i].equals(word1)) {
                index1 = i;
                if (index1 != -1) {
                    minDistance = Math.min(minDistance, (index1 - index2));
                }
            } else if (sentence[i].equals(word2)) {
                index2 = i;
                if (index2 != -1) {
                    minDistance = Math.min(minDistance, (index2 - index1));
                }
            }
        }
        return minDistance == Integer.MAX_VALUE ? -1 : minDistance;
    }

    public static void main(String[] args) {
        String str = "the quick the brown quick brown the frog";
        String word1 = "quick";
        String word2 = "frog";
        System.out.println(minDistanceSentence(str,word1,word2));
    }
}


5. Given a string,
    return the first non-repeating character.

Examples:
String str1 = "12345"
    //Return 1

String str2 = "abbacd"
    //Return c


import java.util.HashMap;
import java.util.Map;

public class fifthOne {
    public static String firstNonRepeatingCharacter(String input){
        HashMap<Character,Integer> hashMap = new HashMap<>();
        for(char c: input.toCharArray()){
                hashMap.put(c,hashMap.getOrDefault(c,0)+1);
        }
        for(Map.Entry<Character,Integer> map : hashMap.entrySet()){
            if(map.getValue()==1){
                return map.getKey().toString();
            }
        }
    return "0";
    }
    public static void main(String[] args) {
        String str1 = "12345";
        String str2 = "abbacd";
        System.out.println(firstNonRepeatingCharacter(str1));
        System.out.println(firstNonRepeatingCharacter(str2));
    }
}


6. Given a sorted rotated array,
    return the minimum element from it.

Examples:
    int[] arr1 = {5, 6, 1, 2, 3, 4};    //Return 1

    int[] arr2 = {1, 2, 3, 4};            //Return 1


public class SixthOne {
    public static int minSortArray(int[] input){
        int minArr=input[0];
        for(int num: input){
            if(num<minArr) {
                minArr = num;
            }
        }
        return minArr;
    }
    public static void main(String[] args) {
        int[] arr1 = {5, 6, 1, 2, 3, 4};
        int[] arr2 = {1, 2, 3, 4};
        System.out.println(minSortArray(arr1));
        System.out.println(minSortArray(arr2));

    }
}


7. A staircase with n steps is given. Starting from the base,
    return the number of ways of reaching the n’th stair.

    [The person can climb either 1 or 2 stairs in one move]. 

public class SeventhOne {
    public static int stairCaseSteps(int n){
        int[] steps = new int[n+1];
        steps[0]=1;
        steps[1]=1;
        for(int i=2;i<=n;i++){
            steps[i] = steps[i-1]+steps[i-2];
        }
        return steps[n];
    }
    public static void main(String[] args) {
        int n=5;
        System.out.println(stairCaseSteps(n));
    }
}


8. Given a list of student names and corresponding marks,
    return the highest average marks (and print the corresponding student name - optional).
    The marks can be negative as well and a student may have multiple marks.

Example:
 String[][] = {{“Charles”, 84},
                      {“John”, 100},
                      {“Andy”, 37},
                      {“John”, 23},
                      {“Charles”, 20}};

    //Return 61.5 (which is of John's)

import java.util.HashMap;

public class EighthOne {
    public static void averageStudents(String[][] input){
        String result="";
        HashMap<String,Integer> total = new HashMap<>();
        HashMap<String,Integer> count= new HashMap<>();
        for(String[] data: input) {
            String student = data[0];
            int marks= Integer.parseInt(data[1]);
            total.put(student,total.getOrDefault(student,0)+marks);
            count.put(student,count.getOrDefault(student,0)+1);
        }
        double highestAverage=Double.NEGATIVE_INFINITY;
        for(String student: total.keySet()){
           double average= (double) total.get(student)/count.get(student);
            if(average>highestAverage){
                highestAverage = average;
                result= student;
            }
        }

        System.out.printf(String.valueOf(highestAverage));
        System.out.println(" "+result);
    }
    public static void main(String[] args) {
        String[][] str = {{"Charles","84"},
            {"John", "100"},
            {"Andy", "37"},
            {"John", "23"},
            {"Charles", "20"}};
        averageStudents(str);
    }
}


9. Given an array of integers and a sum K,
    return the length of the shortest sub-array which matches the given sum. If it doesn't exist, return -1.
    [Even a single integer can be considered as a sum.]

Examples:
    int[] arr = {2, 4, 6, 10, 2, 1}, K = 12        // Return 2

    int[] arr = {5, 8, 50, 4}, K = 50                // Return 50 (A single integer may be considered as a sum)

public class NinethOne {
    public static int subArr(int[] input, int n){
        int start=0;
        int currentSum=0;
        int maxLength=Integer.MAX_VALUE;
        int maxSum=Integer.MAX_VALUE;
        boolean returnSum;

        for(int i=0;i<input.length;i++){
            currentSum +=input[i];

            while(currentSum>=n){
                int currentLength=i-start+1;

                if(currentLength<maxLength){
                 maxLength=currentLength;
                 maxSum=currentSum;
                }
                currentSum -=input[start];
                start++;
            }
        }
        if(maxLength==1){
            returnSum=true;
        }
        else{
            returnSum=false;
        }

        return returnSum?maxSum:maxLength;
    }
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 10, 2, 1};
        int K = 12;
        int[] arr1 = {5, 8, 50, 4};
        int K1 = 50;
        System.out.println(subArr(arr,K));
        System.out.println(subArr(arr1,K1));
    }
}



10. Given a dictionary (list of words) and a word,
    return an array of strings that can be formed from the given word.
    [Every letter in the input word can occur only once in the word to be returned].

Examples:
    String[] dict = {"ab", "abcd", "bcdaf", "bcad", "acb", "acab"};
    String input = "abcd";
    // Return {"abcd", "bcad"}

    String[] dict =  {"ab", "abcd", "bcdaf", "bcad", "acaab", "acab"};
    String input = "caab";
    // Return {"acab"}


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class TenthOne {
    public static String[] stringList(String[] input,String input1){
        List<String> list= new ArrayList<>();
        HashMap<Character,Integer> hashMap = new HashMap<>();
        for(char c: input1.toCharArray()){
            hashMap.put(c,hashMap.getOrDefault(c,0)+1);
        }
        for(String word: input){
            if(canFormWord(word,hashMap)){
                list.add(word);
            }
        }
        return list.toArray(new String[0]);
    }

    private static boolean canFormWord(String word,HashMap<Character,Integer> hashMap){
        HashMap<Character,Integer> hash= new HashMap<>();
        for(char e: word.toCharArray()){
            hash.put(e,hash.getOrDefault(e,0)+1);
        }
        for(char f:hash.keySet()){
            if(hash.get(f) > hashMap.getOrDefault(f,0)){
                return false;
            }
        }
return true;
    }
    public static void main(String[] args) {
        String[] dict = {"ab", "abcd", "bcdaf", "bcad", "acb", "acab"};
        String input = "abcd";
        String[] result=stringList(dict,input);
        System.out.println(String.join(", ",result));
    }
}


11. Given a sorted array of non-negative integers of size n,
    return the smallest missing integer.

Examples:
    int[] arr1 = {1, 2, 3, 4};    // Return 0

    int[] arr2 = {0, 1, 3, 4};    // Return 2


public class NInethOne {
    public static int findSmallestInteger(int[] arr) {
        int n=arr.length;
        if(n==0|| arr[0]>0){
            return 0;
        }
        for(int i=0;i<n;i++){
            if(i==arr[i]) {
                continue;
            }
            else {
                return i;
            }
        }
        return n;
    }    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4};
        int[] arr2 = {0, 1, 3, 4};
        System.out.println(findSmallestInteger(arr1));
        System.out.println(findSmallestInteger(arr2));
    }
}

12. Check whether a number is a power of 10.


public class PowerOfTen {
    // Method to check if a number is a power of 10
    public static boolean isPowerOfTen(int n) {
        // A power of 10 must be a positive integer
        if (n <= 0) {
            return false;
        }

        // Divide n by 10 until it is no longer divisible
        while (n % 10 == 0) {
            n /= 10;
        }

        // If n becomes 1, then it is a power of 10
        return n == 1;
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        int num1 = 1000;  // Should return true (10^3)
        int num2 = 50;    // Should return false
        int num3 = 1;     // Should return true (10^0)
        int num4 = 10;    // Should return true (10^1)

        System.out.println(num1 + " is a power of 10: " + isPowerOfTen(num1));
        System.out.println(num2 + " is a power of 10: " + isPowerOfTen(num2));
        System.out.println(num3 + " is a power of 10: " + isPowerOfTen(num3));
        System.out.println(num4 + " is a power of 10: " + isPowerOfTen(num4));
    }
}

13. Given a string,
    return the starting index & length of the longest substring containing the same character.

Example:
    String[] str = "aabbbbCCddd";    // Return 2 (index) and substring "bbbb"


import java.util.HashMap;

public class LongestSubString {
    public static int[] findLongestsubString(String input){
        int n=input.length();
        int maxLength=0;
        int startIndex=0;
        int longestStartIndex=0;
        HashMap<Character,Integer> hashMap = new HashMap<>();
        for(int endIndex=0;endIndex<n;endIndex++){
            char b=input.charAt(endIndex);
            if(hashMap.containsKey(b) && hashMap.get(b) >= startIndex){
                startIndex=hashMap.get(b)+1;
            }
            hashMap.put(b,endIndex);
            int index=endIndex-startIndex+1;
            if(index>maxLength){
                maxLength=index;
                longestStartIndex=startIndex;
            }
        }
        return new int[]{longestStartIndex,maxLength};
    }
    public static void main(String[] args){
        String a="abbcabcbb";
        int[] result = findLongestsubString(a);
        System.out.println("Longest Sub String: "+a.substring(result[0],result[0]+result[1]));
        System.out.println("Start Index: "+result[0]);
        System.out.println("Length: "+result[1]);

    }
}

14. Given an array of integers (positive and negative),
    return length of the loop, if it exists. Else return -1.
    [ Rules for the movement - Index to move to,
        for +ve numbers - (i + arr[i])%n
        for -ve numbers - (i - arr[i])%n ]

Example:
    int[] arr = {2, -1, 1, 2, 2}    
    // Returns 3  [There is a loop in this array because 0 moves to 2, 2 moves to 3, and 3 moves to 0.]


import java.util.HashSet;

public class LoopInArray {
    // Method to find the length of the loop in the array
    public static int findLoopLength(int[] arr) {
        int n = arr.length;
        HashSet<Integer> visited = new HashSet<>();
        int currentIndex = 0;

        while (true) {
            // Check if currentIndex is out of bounds
            if (currentIndex < 0 || currentIndex >= n) {
                return -1; // Out of bounds, so no loop
            }

            // If we have visited this index before, a loop exists
            if (visited.contains(currentIndex)) {
                // Now we need to calculate the loop length
                int loopLength = 1;
                int loopIndex = currentIndex;
                int nextIndex = (loopIndex + arr[loopIndex]) % n;

                // Traverse the loop to count its length
                while (nextIndex != loopIndex) {
                    loopLength++;
                    nextIndex = (nextIndex + arr[nextIndex]) % n;
                }
                return loopLength;
            }

            // Mark the current index as visited
            visited.add(currentIndex);
            // Move to the next index based on the value at the current index
            currentIndex = (currentIndex + arr[currentIndex]) % n;
        }
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        int[] arr = {2, -1, 1, 2, 2};
        int result = findLoopLength(arr);

        if (result != -1) {
            System.out.println("Length of the loop: " + result);
        } else {
            System.out.println("No loop exists.");
        }
    }
}


15. Given an array of integers,
    sort it in a wave form.
    [ The order of elements in a wave form:
       arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4] >= ….. ]

Example:
    int[] arr = {10, 5, 6, 3, 2, 20, 100, 80};
    Answer : arr[] = {10, 5, 6, 2, 20, 3, 100, 80} OR {20, 5, 10, 2, 80, 6, 100, 3}


import java.util.Arrays;

public class WaveSort {

    // Method to sort the array in wave form
    public static void waveSort(int[] arr) {
        // Sort the array first
        Arrays.sort(arr);

        // Swap adjacent elements to create the wave form
        for (int i = 0; i < arr.length - 1; i += 2) {
            // Swap arr[i] and arr[i + 1]
            int temp = arr[i];
            arr[i] = arr[i + 1];
            arr[i + 1] = temp;
        }
    }

    // Main method to test the wave sort
    public static void main(String[] args) {
        int[] arr = {10, 5, 6, 3, 2, 20, 100, 80};

        System.out.println("Original Array: " + Arrays.toString(arr));
        
        waveSort(arr);
        
        System.out.println("Wave Sorted Array: " + Arrays.toString(arr));
    }
}


16. Given a matrix of size m * n,
    return the maximum path sum in the matrix.
    [You start from the top-left corner of the matrix and may up, down and diagonally].

Example:
    Matrix      10 10  2  0 20  4
                       1  0  0 30  2  5
                       0 10  4  0  2  0
                       1  0  2 20  0  4
    
    // Return 74 [The maximum sum path is 20-30-4-20]


public class MaxPathSum {
    
    // Method to calculate the maximum path sum in the matrix
    public static int maxPathSum(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;

        // Create a dp array to store the maximum path sums
        int[][] dp = new int[m][n];

        // Initialize the top-left corner
        dp[0][0] = matrix[0][0];

        // Fill the first row
        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j - 1] + matrix[0][j];
        }

        // Fill the first column
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i - 1][0] + matrix[i][0];
        }

        // Fill the rest of the dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = matrix[i][j] + Math.max(dp[i - 1][j], Math.max(dp[i][j - 1], dp[i - 1][j - 1]));
            }
        }

        // The maximum path sum will be in the bottom-right corner
        return dp[m - 1][n - 1];
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        int[][] matrix = {
            {10, 10, 2, 0, 20, 4},
            {1, 0, 0, 30, 2, 5},
            {0, 10, 4, 0, 2, 0},
            {1, 0, 2, 20, 0, 4}
        };

        int result = maxPathSum(matrix);
        System.out.println("Maximum Path Sum: " + result); // Should return 74
    }
}


17. We are given a chess board and a piece with a fixed position (immoveable). We also have a bishop on the board which, well of course, can only move diagonally.
    - Return "YES" if we can reach the immoveable piece using the bishop, else return "NO".
    - If "YES", return the number of minimum steps it takes for the bishop to reach the immoveable piece.


public class BishopReach {

    // Method to determine if the bishop can reach the immoveable piece
    public static String canReachBishop(int bishopRow, int bishopCol, int pieceRow, int pieceCol) {
        // Check if the bishop is already on the immoveable piece
        if (bishopRow == pieceRow && bishopCol == pieceCol) {
            return "YES, 0";
        }

        // Check the colors of the squares
        if ((bishopRow + bishopCol) % 2 != (pieceRow + pieceCol) % 2) {
            return "NO"; // Different colors, cannot reach
        }

        // Check if the bishop can reach in one move
        if (Math.abs(bishopRow - pieceRow) == Math.abs(bishopCol - pieceCol)) {
            return "YES, 1"; // Can reach in one move
        }

        // If it's the same color and not reachable in one move, it takes 2 moves
        return "YES, 2"; // Can reach in two moves
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        System.out.println(canReachBishop(1, 1, 3, 3)); // Output: "YES, 1"
        System.out.println(canReachBishop(1, 1, 2, 2)); // Output: "YES, 1"
        System.out.println(canReachBishop(1, 1, 4, 4)); // Output: "YES, 2"
        System.out.println(canReachBishop(1, 1, 2, 3)); // Output: "NO"
        System.out.println(canReachBishop(1, 1, 1, 1)); // Output: "YES, 0"
    }
}

18. Second Smallest in Array

public class SecondSmallest {
    public static void main(String[] args) {
        int[] array = {12, 3, 5, 7, 19, 3};
        int secondSmallest = findSecondSmallest(array);

        if (secondSmallest != Integer.MAX_VALUE) {
            System.out.println("The second smallest element is: " + secondSmallest);
        } else {
            System.out.println("There is no second smallest element.");
        }
    }

    public static int findSecondSmallest(int[] array) {
        if (array.length < 2) {
            return Integer.MAX_VALUE; // Not enough elements
        }

        int smallest = Integer.MAX_VALUE;
        int secondSmallest = Integer.MAX_VALUE;

        for (int num : array) {
            if (num < smallest) {
                secondSmallest = smallest;
                smallest = num;
            } else if (num < secondSmallest && num != smallest) {
                secondSmallest = num;
            }
        }

        return secondSmallest;
    }
}

19. Find the missing integer in an array.

public class MissingInteger {
    public static void main(String[] args) {
        int[] array = {1, 2, 4, 5, 6}; 
        int missingNumber = findMissingNumber(array);
        System.out.println("The missing integer is: " + missingNumber);
    }

    public static int findMissingNumber(int[] array) {      
 	int actualSum = 0;        
	int expectedSum = n * (n + 1) / 2;
	int n=array.length+1;
        for (int num : array) {
            actualSum += num;
        }
        return expectedSum - actualSum;
    }
}


20. Valid Paranthesis in java program

public class ValidParanthesis {
    public static boolean isValidParanthesis(String input){
        int balance=0;
        for(char c: input.toCharArray()){
            if(c=='('){
                balance++;
            } else if (c==')') {
                balance--;
            }
            if(balance<0){
                return false;
            }
        }
        return balance==0;
    }
    public static void main(String[] args) {
        String a="(()())";
        boolean isValid=isValidParanthesis(a);
        System.out.println(isValid);
    }
}

21. Median of two sorted Arrays

import java.util.Arrays;

public class medianTwoSortedArray {
public static int findMedian(int[] num1,int[] num2){
    int median=0;
    int num3[]=new int[num1.length+num2.length];
    int index=0;
    for(int i=0;i<num1.length;i++){
        num3[index]=num1[i];
        index++;
    }
    while(index<num3.length){
        for(int j=0;j<num2.length;j++){
            num3[index]=num2[j];
            index++;
        }
    }
    Arrays.sort(num3);
    int n=num3.length/2;
    int n1=num3.length;

    if(num3.length%2!=0){
        median=num3[n];
    }
    else{
        median = (num3[n]+n1)/2;
    }

    return median;
}
    public static void main(String[] args) {

        int nums1[] = {2, 3, 5, 8};
        int nums2[] = {10, 12, 14, 16, 18, 20};
        System.out.println(findMedian(nums1,nums2));
    }
}

